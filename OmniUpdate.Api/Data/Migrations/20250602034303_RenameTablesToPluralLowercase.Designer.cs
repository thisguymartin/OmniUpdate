// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace OmniUpdate.Api.Data.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20250602034303_RenameTablesToPluralLowercase")]
    partial class RenameTablesToPluralLowercase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OmniUpdate.Api.Models.Entities.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EventId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("events", (string)null);
                });

            modelBuilder.Entity("OmniUpdate.Api.Models.Entities.EventIntegration", b =>
                {
                    b.Property<int>("EventIntegrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EventIntegrationId"));

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserIntegrationId")
                        .HasColumnType("integer");

                    b.HasKey("EventIntegrationId");

                    b.HasIndex("EventId");

                    b.HasIndex("UserIntegrationId");

                    b.ToTable("eventintegrations", (string)null);
                });

            modelBuilder.Entity("OmniUpdate.Api.Models.Entities.Integration", b =>
                {
                    b.Property<int>("IntegrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IntegrationId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IntegrationId");

                    b.ToTable("integrations", (string)null);
                });

            modelBuilder.Entity("OmniUpdate.Api.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreateDate")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdateDate")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("OmniUpdate.Api.Models.Entities.UserIntegration", b =>
                {
                    b.Property<int>("UserIntegrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserIntegrationId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Credentials")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("IntegrationId")
                        .HasColumnType("integer");

                    b.Property<string>("Settings")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("UserIntegrationId");

                    b.HasIndex("IntegrationId");

                    b.HasIndex("UserId");

                    b.ToTable("userintegrations", (string)null);
                });

            modelBuilder.Entity("OmniUpdate.Api.Models.Entities.Event", b =>
                {
                    b.HasOne("OmniUpdate.Api.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OmniUpdate.Api.Models.Entities.EventIntegration", b =>
                {
                    b.HasOne("OmniUpdate.Api.Models.Entities.Event", "Event")
                        .WithMany("EventIntegrations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OmniUpdate.Api.Models.Entities.UserIntegration", "UserIntegration")
                        .WithMany()
                        .HasForeignKey("UserIntegrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("UserIntegration");
                });

            modelBuilder.Entity("OmniUpdate.Api.Models.Entities.UserIntegration", b =>
                {
                    b.HasOne("OmniUpdate.Api.Models.Entities.Integration", "Integration")
                        .WithMany("UserIntegrations")
                        .HasForeignKey("IntegrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OmniUpdate.Api.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Integration");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OmniUpdate.Api.Models.Entities.Event", b =>
                {
                    b.Navigation("EventIntegrations");
                });

            modelBuilder.Entity("OmniUpdate.Api.Models.Entities.Integration", b =>
                {
                    b.Navigation("UserIntegrations");
                });
#pragma warning restore 612, 618
        }
    }
}
